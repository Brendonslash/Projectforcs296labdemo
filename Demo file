#ifndef JOINTS_H
#define JOINTS_H
#define DEGTORAD 0.0174532925199432957f
#define RADTODEG 57.295779513082320876f

using namespace std;
class Joints : public Test
    {
		enum _moveState {
    MS_STOP,
    MS_LEFT,
    MS_RIGHT,
  };
  //b2Body* body;
  _moveState moveState;
  
		b2Body* m_bodyA;
		b2Body* m_bodyB;
		b2Body* m_bodyC;
		b2RevoluteJoint* m_joint;
		b2RevoluteJoint* m_joint3;
		b2PrismaticJoint* m_joint2;
		b2PrismaticJoint* m_joint4;
		b2RevoluteJointDef revoluteJointDef2;
		 b2RevoluteJointDef revoluteJointDef;
		Joints(){
  b2BodyDef bodyDef;
  bodyDef.type = b2_dynamicBody;
  b2FixtureDef fixtureDef;
  fixtureDef.density = 1;
  
 // b2BodyDef bodyDef1;
  //bodyDef.type = b2_staticBody;
  //b2FixtureDef fixtureDef1;
  //fixtureDef1.density = 1;
  b2PolygonShape polygonshape; 
 // shape.Set(b2Vec2(-90.0f, 0.0f), b2Vec2(90.0f, 0.0f));
 //shape definition
    b2PolygonShape polygonShape;
    polygonShape.SetAsBox(1, 1); //a 2x2 rectangle
  b2BodyDef myBodyDef;
    myBodyDef.type = b2_dynamicBody;
   myBodyDef.type = b2_staticBody;
    myBodyDef.position.Set(0, 0);
    b2Body* staticBody = m_world->CreateBody(&myBodyDef);
    //fixture definition
    b2FixtureDef myFixtureDef;
    myFixtureDef.shape = &polygonShape;
    myFixtureDef.density = 1;
   polygonShape.SetAsBox( 200, 13, b2Vec2(0, 0), 0);//ground
    staticBody->CreateFixture(&myFixtureDef);
 
  //two shapes
  b2PolygonShape boxShape;
  boxShape.SetAsBox(10,5);
  b2CircleShape circleShape1;
  b2CircleShape circleShape2;
  circleShape1.m_radius = 2; 
  circleShape2.m_radius = 2;     
  
  //make box a little to the left
  bodyDef.position.Set(4.5, 20);
  fixtureDef.shape = &boxShape;
  m_bodyA = m_world->CreateBody( &bodyDef );
  m_bodyA->CreateFixture( &fixtureDef );
  
  //and circle a little to the right
  
  bodyDef.position.Set( 3, 10);
  fixtureDef.shape = &circleShape1;
  m_bodyB = m_world->CreateBody( &bodyDef );
  m_bodyB->CreateFixture( &fixtureDef );
  
  bodyDef.position.Set( 6, 10);
  fixtureDef.shape = &circleShape2;
  m_bodyC = m_world->CreateBody( &bodyDef );
  m_bodyC->CreateFixture( &fixtureDef );
  //defining joints

  revoluteJointDef.bodyA = m_bodyA;
  revoluteJointDef.bodyB = m_bodyB;
  revoluteJointDef.collideConnected = false;
  revoluteJointDef.localAnchorA.Set(10,-5);//the top right corner of the box
  revoluteJointDef.localAnchorB.Set(0,0);//center of the circle
  
   m_joint = (b2RevoluteJoint*)m_world->CreateJoint( &revoluteJointDef );
  //place the bodyB anchor at the edge of the circle 
  //revoluteJointDef.localAnchorB.Set(-10,0);
  
  //place the bodyA anchor outside the fixture
  //revoluteJointDef.localAnchorA.Set(30,10);
  /*
  revoluteJointDef.enableLimit = false;
  revoluteJointDef.lowerAngle = -30 * DEGTORAD;
  revoluteJointDef.upperAngle =  30 * DEGTORAD;
  revoluteJointDef.enableMotor = true;
  revoluteJointDef.maxMotorTorque = 15;
  revoluteJointDef.motorSpeed = 90 * DEGTORAD;//90 degrees per second
  
  */
  
  revoluteJointDef2.bodyA = m_bodyA;
  revoluteJointDef2.bodyB = m_bodyC;
  revoluteJointDef2.collideConnected = false;
  revoluteJointDef2.localAnchorA.Set(-10,-5);//the top right corner of the box
  revoluteJointDef2.localAnchorB.Set(0,0);//center of the circle
  
 m_joint3 = (b2RevoluteJoint*)m_world->CreateJoint( &revoluteJointDef2 );
  //place the bodyB anchor at the edge of /*the circle 
  
  b2PrismaticJointDef prismaticJointDef;
  prismaticJointDef.bodyA = m_bodyA;
  prismaticJointDef.bodyB = m_bodyB;
  prismaticJointDef.collideConnected = false;
 prismaticJointDef.localAxis1.Set(-18.5,-5);
   //prismaticJointDef.localAxis1.Normalize();
  //prismaticJointDef.localAnchorA
  /*
  prismaticJointDef.localAnchorA.Set(-10.45,-5);//a little outside the bottom right corner
  prismaticJointDef.localAnchorB.Set(-18.5,-5);//bottom left corner
  m_joint2 = (b2PrismaticJoint*)m_world->CreateJoint( &prismaticJointDef);
  

  b2PrismaticJointDef prismaticJointDef2;
  prismaticJointDef2.bodyA = m_bodyA;
  prismaticJointDef2.bodyB = m_bodyC;
  prismaticJointDef2.collideConnected = false;
  prismaticJointDef2.localAxis1.Set(18.	5,-5);
  //prismaticJointDef.localAnchorA
  prismaticJointDef2.localAnchorA.Set(10.45,-5);//a little outside the bottom right corner
  prismaticJointDef2.localAnchorB.Set(18.5,-5);//bottom left corner
  m_joint4 = (b2PrismaticJoint*)m_world->CreateJoint( &prismaticJointDef2);
 
  
  //place the bodyA anchor outside the fixture
  /*
  revoluteJointDef2.localAnchorA.Set(-10,-5);
  revoluteJointDef2.enableLimit = false;
  revoluteJointDef2.lowerAngle = -30 * DEGTORAD;
  revoluteJointDef2.upperAngle =  30* DEGTORAD;
  revoluteJointDef2.enableMotor = true;
  revoluteJointDef2.maxMotorTorque = 15;
  revoluteJointDef2.motorSpeed = 90 * DEGTORAD;//90 degrees per second
  * */
   moveState = MS_STOP;
}

  void Keyboard(unsigned char key)
  {
    switch (key)
    {
      case 'q': //move left
        moveState = MS_LEFT;
        break;
      case 'w': //stop
        moveState = MS_STOP;
        break;
      case 'e': //move right
        moveState = MS_RIGHT;
        break;
        case 'j': //jump
  {
    b2Vec2 vel = m_bodyA->GetLinearVelocity();
    vel.y = 10;//upwards - don't change x velocity
    m_bodyA->SetLinearVelocity( vel );
  break;
}
      default:
        //run default behaviour
        Test::Keyboard(key);
    }
    
  }
  
 void Step(Settings* settings)
        {
			//revoluteJointDef.SetMotorSpeed(15*Math.PI * (moveState.isPressed(40) ? 1 : moveState.isPressed(38) ? -1 : 0));
       // revoluteJointDef.SetMaxMotorTorque(moveState.isPressed(40) || moveState.isPressed(38) ? 17 : 0.5);
        
         //revoluteJointDef2.SetMotorSpeed(15*Math.PI * (moveState.isPressed(40) ? 1 : moveState.isPressed(38) ? -1 : 0));
         //revoluteJointDef2.SetMaxMotorTorque(moveState.isPressed(40) || moveState.isPressed(38) ? 12 : 0.5);
			/*
			b2Vec2 vel1 = m_bodyA->GetLinearVelocity();
			b2Vec2 vel2 = m_bodyB->GetLinearVelocity();
			b2Vec2 vel3 = m_bodyC->GetLinearVelocity();
    float force = 0;
    switch ( moveState )
    {
      case MS_LEFT:  if ( vel1.x > -5 ) force = -5;  break;
      case MS_STOP:  force = vel1.x * -10; break;
      case MS_RIGHT: if ( vel1.x <  5 ) force =  5; break;
    }
    m_bodyA->ApplyForce( b2Vec2(force,0), m_bodyA->GetWorldCenter() );
    m_bodyB->ApplyForce( b2Vec2(force,0), m_bodyB->GetWorldCenter() );
    m_bodyC->ApplyForce( b2Vec2(force,0), m_bodyC->GetWorldCenter() );
    * 
    * 
    * */
   
    //b2Vec2 toTarget = clickedPoint - body->GetPosition();
    float desiredAngle =180*DEGTORAD;
    float nextAngle;
     float totalRotation;
     float desiredAngularVelocity;
       float change;
        float impulse;
        float bodyAngle;
    switch( moveState ){
		case MS_LEFT:
	
  //while ( totalRotation < -180 * DEGTORAD ) totalRotation += 360 * DEGTORAD;
  //while ( totalRotation >  180 * DEGTORAD ) totalRotation -= 360 * DEGTORAD;
   bodyAngle= m_bodyB->GetAngle();
  nextAngle = bodyAngle + m_bodyB->GetAngularVelocity()/10.0;
   totalRotation = nextAngle-bodyAngle;
  m_bodyB->SetAngularVelocity(-100* DEGTORAD);
  //change = 1 * DEGTORAD; //allow 1 degree rotation per time step
  //desiredAngularVelocity = min( change, max(-change, desiredAngularVelocity));
 // impulse = m_bodyB->GetInertia() * desiredAngularVelocity;
  //m_bodyB->ApplyAngularImpulse( 5*impulse ); break;
  break;
  
  case MS_RIGHT:
  bodyAngle= m_bodyC->GetAngle();
   nextAngle = bodyAngle + m_bodyC->GetAngularVelocity()/10.0;
   totalRotation =  bodyAngle-nextAngle;
  //while ( totalRotation < -180 * DEGTORAD ) totalRotation += 360 * DEGTORAD;
  //while ( totalRotation >  180 * DEGTORAD ) totalRotation -= 360 * DEGTORAD;
  m_bodyC->SetAngularVelocity(100* DEGTORAD);
  //change = 1 * DEGTORAD; //allow 1 degree rotation per time step
 // desiredAngularVelocity = min( change, max(-change, desiredAngularVelocity));
  //impulse = m_bodyC->GetInertia() * desiredAngularVelocity;
  //m_bodyC->ApplyAngularImpulse( impulse ); break ;
  break;
  
  case MS_STOP:
  bodyAngle= m_bodyC->GetAngle();
   nextAngle = bodyAngle + m_bodyC->GetAngularVelocity()/10.0;
   totalRotation = bodyAngle-nextAngle;
  //while ( totalRotation < -180 * DEGTORAD ) totalRotation += 360 * DEGTORAD;
  //while ( totalRotation >  180 * DEGTORAD ) totalRotation -= 360 * DEGTORAD;
   m_bodyB->SetAngularVelocity(0);
   m_bodyC->SetAngularVelocity(0);
 // change = 1 * DEGTORAD; //allow 1 degree rotation per time step
  //desiredAngularVelocity = min( change, max(-change, desiredAngularVelocity));
  //impulse = m_bodyC->GetInertia() * desiredAngularVelocity;
  //m_bodyC->ApplyAngularImpulse( -5*impulse ); break ;
  break;
  
  
}
  
            Test::Step(settings); 
  m_debugDraw.DrawString(5, m_textLine, "Current joint angle: %f deg", m_joint->GetJointAngle() * RADTODEG);
  m_textLine += 15;
  m_debugDraw.DrawString(5, m_textLine, "Current joint speed: %f deg/s", m_joint->GetJointSpeed() * RADTODEG);
  m_textLine += 15;
            m_debugDraw.DrawString(5, m_textLine, "Now we have a foo test");
            m_textLine += 15;
        }
	public:
	static Test* Create()
        {
            return new Joints;
        }
  
    };
    #endif
